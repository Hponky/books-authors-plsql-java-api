ALTER SESSION SET CURRENT_SCHEMA = BOOKS_APP;

--------------------------------------------------------
-- Creación de Tablas
--------------------------------------------------------

PROMPT Creando tabla AUTORES...
CREATE TABLE AUTORES (
    ID_AUTOR NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NOMBRE VARCHAR2(100 CHAR) NOT NULL,
    APELLIDO VARCHAR2(100 CHAR) NOT NULL,
    FECHA_NACIMIENTO DATE,
    NACIONALIDAD VARCHAR2(50 CHAR),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FECHA_MODIFICACION TIMESTAMP
);

COMMENT ON TABLE AUTORES IS 'Tabla para almacenar información de los autores.';
COMMENT ON COLUMN AUTORES.ID_AUTOR IS 'Identificador único del autor (PK, autoincremental).';
COMMENT ON COLUMN AUTORES.NOMBRE IS 'Nombre del autor.';
COMMENT ON COLUMN AUTORES.APELLIDO IS 'Apellido del autor.';
COMMENT ON COLUMN AUTORES.FECHA_NACIMIENTO IS 'Fecha de nacimiento del autor.';
COMMENT ON COLUMN AUTORES.NACIONALIDAD IS 'Nacionalidad del autor.';
COMMENT ON COLUMN AUTORES.FECHA_CREACION IS 'Timestamp de creación del registro.';
COMMENT ON COLUMN AUTORES.FECHA_MODIFICACION IS 'Timestamp de la última modificación del registro.';

PROMPT Creando tabla LIBROS...
CREATE TABLE LIBROS (
    ID_LIBRO NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    TITULO VARCHAR2(255 CHAR) NOT NULL,
    ISBN VARCHAR2(20 CHAR) UNIQUE NOT NULL,
    ANIO_PUBLICACION NUMBER(4),
    ID_AUTOR NUMBER NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FECHA_MODIFICACION TIMESTAMP,
    CONSTRAINT FK_LIBRO_AUTOR FOREIGN KEY (ID_AUTOR) REFERENCES AUTORES(ID_AUTOR)
);

COMMENT ON TABLE LIBROS IS 'Tabla para almacenar información de los libros.';
COMMENT ON COLUMN LIBROS.ID_LIBRO IS 'Identificador único del libro (PK, autoincremental).';
COMMENT ON COLUMN LIBROS.TITULO IS 'Título del libro.';
COMMENT ON COLUMN LIBROS.ISBN IS 'Código ISBN del libro (único).';
COMMENT ON COLUMN LIBROS.ANIO_PUBLICACION IS 'Año de publicación del libro.';
COMMENT ON COLUMN LIBROS.ID_AUTOR IS 'Identificador del autor del libro (FK a AUTORES).';
COMMENT ON COLUMN LIBROS.FECHA_CREACION IS 'Timestamp de creación del registro.';
COMMENT ON COLUMN LIBROS.FECHA_MODIFICACION IS 'Timestamp de la última modificación del registro.';

--------------------------------------------------------
-- Creación de Paquete para Gestión de Autores
--------------------------------------------------------

PROMPT Creando especificación del paquete PKG_GESTION_AUTORES...
CREATE OR REPLACE PACKAGE PKG_GESTION_AUTORES AS

    PROCEDURE SP_INSERTAR_AUTOR (
        p_nombre IN AUTORES.NOMBRE%TYPE,
        p_apellido IN AUTORES.APELLIDO%TYPE,
        p_fecha_nacimiento IN AUTORES.FECHA_NACIMIENTO%TYPE DEFAULT NULL,
        p_nacionalidad IN AUTORES.NACIONALIDAD%TYPE DEFAULT NULL,
        p_id_autor_out OUT AUTORES.ID_AUTOR%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    );

    PROCEDURE SP_ACTUALIZAR_AUTOR (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE,
        p_nombre IN AUTORES.NOMBRE%TYPE,
        p_apellido IN AUTORES.APELLIDO%TYPE,
        p_fecha_nacimiento IN AUTORES.FECHA_NACIMIENTO%TYPE DEFAULT NULL,
        p_nacionalidad IN AUTORES.NACIONALIDAD%TYPE DEFAULT NULL,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    );

    PROCEDURE SP_ELIMINAR_AUTOR (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    );

    FUNCTION SF_CONSULTAR_AUTOR_POR_ID (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE
    ) RETURN SYS_REFCURSOR;

    FUNCTION SF_CONSULTAR_TODOS_AUTORES
    RETURN SYS_REFCURSOR;

END PKG_GESTION_AUTORES;
/

PROMPT Creando cuerpo del paquete PKG_GESTION_AUTORES...
CREATE OR REPLACE PACKAGE BODY PKG_GESTION_AUTORES AS

    PROCEDURE SP_INSERTAR_AUTOR (
        p_nombre IN AUTORES.NOMBRE%TYPE,
        p_apellido IN AUTORES.APELLIDO%TYPE,
        p_fecha_nacimiento IN AUTORES.FECHA_NACIMIENTO%TYPE DEFAULT NULL,
        p_nacionalidad IN AUTORES.NACIONALIDAD%TYPE DEFAULT NULL,
        p_id_autor_out OUT AUTORES.ID_AUTOR%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    ) AS
    BEGIN
        p_error_code := 0;
        p_error_message := 'OK';

        IF p_nombre IS NULL OR TRIM(p_nombre) = '' THEN
            p_error_code := 1;
            p_error_message := 'El nombre del autor no puede ser nulo o vacío.';
            RETURN;
        END IF;

        IF p_apellido IS NULL OR TRIM(p_apellido) = '' THEN
            p_error_code := 2;
            p_error_message := 'El apellido del autor no puede ser nulo o vacío.';
            RETURN;
        END IF;

        INSERT INTO AUTORES (NOMBRE, APELLIDO, FECHA_NACIMIENTO, NACIONALIDAD, FECHA_MODIFICACION)
        VALUES (TRIM(p_nombre), TRIM(p_apellido), p_fecha_nacimiento, TRIM(p_nacionalidad), CURRENT_TIMESTAMP)
        RETURNING ID_AUTOR INTO p_id_autor_out;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_id_autor_out := NULL;
            p_error_code := SQLCODE;
            p_error_message := 'Error al insertar autor: ' || SQLERRM;
    END SP_INSERTAR_AUTOR;

    PROCEDURE SP_ACTUALIZAR_AUTOR (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE,
        p_nombre IN AUTORES.NOMBRE%TYPE,
        p_apellido IN AUTORES.APELLIDO%TYPE,
        p_fecha_nacimiento IN AUTORES.FECHA_NACIMIENTO%TYPE DEFAULT NULL,
        p_nacionalidad IN AUTORES.NACIONALIDAD%TYPE DEFAULT NULL,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    ) AS
        v_count NUMBER;
    BEGIN
        p_error_code := 0;
        p_error_message := 'OK';

        SELECT COUNT(*) INTO v_count FROM AUTORES WHERE ID_AUTOR = p_id_autor;
        IF v_count = 0 THEN
            p_error_code := 3;
            p_error_message := 'Autor con ID ' || p_id_autor || ' no encontrado.';
            RETURN;
        END IF;

        IF p_nombre IS NULL OR TRIM(p_nombre) = '' THEN
            p_error_code := 1;
            p_error_message := 'El nombre del autor no puede ser nulo o vacío.';
            RETURN;
        END IF;

        IF p_apellido IS NULL OR TRIM(p_apellido) = '' THEN
            p_error_code := 2;
            p_error_message := 'El apellido del autor no puede ser nulo o vacío.';
            RETURN;
        END IF;

        UPDATE AUTORES
        SET NOMBRE = TRIM(p_nombre),
            APELLIDO = TRIM(p_apellido),
            FECHA_NACIMIENTO = p_fecha_nacimiento,
            NACIONALIDAD = TRIM(p_nacionalidad),
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE ID_AUTOR = p_id_autor;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_error_code := SQLCODE;
            p_error_message := 'Error al actualizar autor: ' || SQLERRM;
    END SP_ACTUALIZAR_AUTOR;

    PROCEDURE SP_ELIMINAR_AUTOR (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    ) AS
        v_libros_asociados NUMBER;
        v_count NUMBER;
    BEGIN
        p_error_code := 0;
        p_error_message := 'OK';

        SELECT COUNT(*) INTO v_count FROM AUTORES WHERE ID_AUTOR = p_id_autor;
        IF v_count = 0 THEN
            p_error_code := 3;
            p_error_message := 'Autor con ID ' || p_id_autor || ' no encontrado para eliminar.';
            RETURN;
        END IF;

        -- Validar dependencia: no eliminar autor si tiene libros asociados
        SELECT COUNT(*) INTO v_libros_asociados FROM LIBROS WHERE ID_AUTOR = p_id_autor;
        IF v_libros_asociados > 0 THEN
            p_error_code := 4; -- Código de error específico para dependencia
            p_error_message := 'No se puede eliminar el autor ID ' || p_id_autor || ' porque tiene ' || v_libros_asociados || ' libro(s) asociado(s).';
            RETURN;
        END IF;

        DELETE FROM AUTORES WHERE ID_AUTOR = p_id_autor;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_error_code := SQLCODE;
            p_error_message := 'Error al eliminar autor: ' || SQLERRM;
    END SP_ELIMINAR_AUTOR;

    FUNCTION SF_CONSULTAR_AUTOR_POR_ID (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE
    ) RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_cursor FOR
            SELECT ID_AUTOR, NOMBRE, APELLIDO, FECHA_NACIMIENTO, NACIONALIDAD, FECHA_CREACION, FECHA_MODIFICACION
            FROM AUTORES
            WHERE ID_AUTOR = p_id_autor;
        RETURN v_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            -- Considerar loggear el error
            RETURN NULL; -- O manejar de otra forma
    END SF_CONSULTAR_AUTOR_POR_ID;

    FUNCTION SF_CONSULTAR_TODOS_AUTORES
    RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_cursor FOR
            SELECT ID_AUTOR, NOMBRE, APELLIDO, FECHA_NACIMIENTO, NACIONALIDAD, FECHA_CREACION, FECHA_MODIFICACION
            FROM AUTORES
            ORDER BY APELLIDO, NOMBRE;
        RETURN v_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            -- Si el cursor está abierto y ocurre un error, ciérralo.
            IF v_cursor%ISOPEN THEN
                CLOSE v_cursor;
            END IF;
            RAISE; -- Propaga la excepción para que el handler REST la capture
    END SF_CONSULTAR_TODOS_AUTORES;

END PKG_GESTION_AUTORES;
/

--------------------------------------------------------
-- Creación de Paquete para Gestión de Libros
--------------------------------------------------------

PROMPT Creando especificación del paquete PKG_GESTION_LIBROS...
CREATE OR REPLACE PACKAGE PKG_GESTION_LIBROS AS

    PROCEDURE SP_INSERTAR_LIBRO (
        p_titulo IN LIBROS.TITULO%TYPE,
        p_isbn IN LIBROS.ISBN%TYPE,
        p_anio_publicacion IN LIBROS.ANIO_PUBLICACION%TYPE DEFAULT NULL,
        p_id_autor IN LIBROS.ID_AUTOR%TYPE,
        p_id_libro_out OUT LIBROS.ID_LIBRO%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    );

    PROCEDURE SP_ACTUALIZAR_LIBRO (
        p_id_libro IN LIBROS.ID_LIBRO%TYPE,
        p_titulo IN LIBROS.TITULO%TYPE,
        p_isbn IN LIBROS.ISBN%TYPE,
        p_anio_publicacion IN LIBROS.ANIO_PUBLICACION%TYPE DEFAULT NULL,
        p_id_autor IN LIBROS.ID_AUTOR%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    );

    PROCEDURE SP_ELIMINAR_LIBRO (
        p_id_libro IN LIBROS.ID_LIBRO%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    );

    FUNCTION SF_CONSULTAR_LIBRO_POR_ID (
        p_id_libro IN LIBROS.ID_LIBRO%TYPE
    ) RETURN SYS_REFCURSOR;

    FUNCTION SF_CONSULTAR_TODOS_LIBROS
    RETURN SYS_REFCURSOR;

    FUNCTION SF_CONSULTAR_LIBROS_POR_AUTOR (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE
    ) RETURN SYS_REFCURSOR;

    FUNCTION SF_CONSULTAR_LIBRO_POR_ISBN (
        p_isbn IN LIBROS.ISBN%TYPE
    ) RETURN SYS_REFCURSOR;


END PKG_GESTION_LIBROS;
/

PROMPT Creando cuerpo del paquete PKG_GESTION_LIBROS...
CREATE OR REPLACE PACKAGE BODY PKG_GESTION_LIBROS AS

    PROCEDURE SP_INSERTAR_LIBRO (
        p_titulo IN LIBROS.TITULO%TYPE,
        p_isbn IN LIBROS.ISBN%TYPE,
        p_anio_publicacion IN LIBROS.ANIO_PUBLICACION%TYPE DEFAULT NULL,
        p_id_autor IN LIBROS.ID_AUTOR%TYPE,
        p_id_libro_out OUT LIBROS.ID_LIBRO%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    ) AS
        v_autor_existe NUMBER;
        v_isbn_existe NUMBER;
    BEGIN
        p_error_code := 0;
        p_error_message := 'OK';

        IF p_titulo IS NULL OR TRIM(p_titulo) = '' THEN
            p_error_code := 10;
            p_error_message := 'El título del libro no puede ser nulo o vacío.';
            RETURN;
        END IF;

        IF p_isbn IS NULL OR TRIM(p_isbn) = '' THEN
            p_error_code := 11;
            p_error_message := 'El ISBN del libro no puede ser nulo o vacío.';
            RETURN;
        END IF;

        -- Validar que el autor exista
        SELECT COUNT(*) INTO v_autor_existe FROM AUTORES WHERE ID_AUTOR = p_id_autor;
        IF v_autor_existe = 0 THEN
            p_error_code := 12; -- Código de error específico para autor no encontrado
            p_error_message := 'El autor con ID ' || p_id_autor || ' no existe. No se puede insertar el libro.';
            RETURN;
        END IF;

        -- Validar que el ISBN no exista ya (es UNIQUE)
        SELECT COUNT(*) INTO v_isbn_existe FROM LIBROS WHERE ISBN = TRIM(p_isbn);
        IF v_isbn_existe > 0 THEN
            p_error_code := 13;
            p_error_message := 'El ISBN ''' || p_isbn || ''' ya existe para otro libro.';
            RETURN;
        END IF;

        INSERT INTO LIBROS (TITULO, ISBN, ANIO_PUBLICACION, ID_AUTOR, FECHA_MODIFICACION)
        VALUES (TRIM(p_titulo), TRIM(p_isbn), p_anio_publicacion, p_id_autor, CURRENT_TIMESTAMP)
        RETURNING ID_LIBRO INTO p_id_libro_out;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_id_libro_out := NULL;
            p_error_code := SQLCODE;
            p_error_message := 'Error al insertar libro: ' || SQLERRM;
    END SP_INSERTAR_LIBRO;

    PROCEDURE SP_ACTUALIZAR_LIBRO (
        p_id_libro IN LIBROS.ID_LIBRO%TYPE,
        p_titulo IN LIBROS.TITULO%TYPE,
        p_isbn IN LIBROS.ISBN%TYPE,
        p_anio_publicacion IN LIBROS.ANIO_PUBLICACION%TYPE DEFAULT NULL,
        p_id_autor IN LIBROS.ID_AUTOR%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    ) AS
        v_autor_existe NUMBER;
        v_libro_existe NUMBER;
        v_isbn_existe_otro NUMBER;
    BEGIN
        p_error_code := 0;
        p_error_message := 'OK';

        SELECT COUNT(*) INTO v_libro_existe FROM LIBROS WHERE ID_LIBRO = p_id_libro;
        IF v_libro_existe = 0 THEN
            p_error_code := 14;
            p_error_message := 'Libro con ID ' || p_id_libro || ' no encontrado.';
            RETURN;
        END IF;

        IF p_titulo IS NULL OR TRIM(p_titulo) = '' THEN
            p_error_code := 10;
            p_error_message := 'El título del libro no puede ser nulo o vacío.';
            RETURN;
        END IF;

        IF p_isbn IS NULL OR TRIM(p_isbn) = '' THEN
            p_error_code := 11;
            p_error_message := 'El ISBN del libro no puede ser nulo o vacío.';
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_autor_existe FROM AUTORES WHERE ID_AUTOR = p_id_autor;
        IF v_autor_existe = 0 THEN
            p_error_code := 12;
            p_error_message := 'El autor con ID ' || p_id_autor || ' no existe. No se puede actualizar el libro.';
            RETURN;
        END IF;

        -- Validar que el ISBN no exista para OTRO libro
        SELECT COUNT(*) INTO v_isbn_existe_otro FROM LIBROS WHERE ISBN = TRIM(p_isbn) AND ID_LIBRO != p_id_libro;
        IF v_isbn_existe_otro > 0 THEN
            p_error_code := 13;
            p_error_message := 'El ISBN ''' || p_isbn || ''' ya existe para otro libro. No se puede actualizar.';
            RETURN;
        END IF;

        UPDATE LIBROS
        SET TITULO = TRIM(p_titulo),
            ISBN = TRIM(p_isbn),
            ANIO_PUBLICACION = p_anio_publicacion,
            ID_AUTOR = p_id_autor,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE ID_LIBRO = p_id_libro;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_error_code := SQLCODE;
            p_error_message := 'Error al actualizar libro: ' || SQLERRM;
    END SP_ACTUALIZAR_LIBRO;

    PROCEDURE SP_ELIMINAR_LIBRO (
        p_id_libro IN LIBROS.ID_LIBRO%TYPE,
        p_error_code OUT NUMBER,
        p_error_message OUT VARCHAR2
    ) AS
        v_count NUMBER;
    BEGIN
        p_error_code := 0;
        p_error_message := 'OK';

        SELECT COUNT(*) INTO v_count FROM LIBROS WHERE ID_LIBRO = p_id_libro;
        IF v_count = 0 THEN
            p_error_code := 14;
            p_error_message := 'Libro con ID ' || p_id_libro || ' no encontrado para eliminar.';
            RETURN;
        END IF;

        DELETE FROM LIBROS WHERE ID_LIBRO = p_id_libro;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_error_code := SQLCODE;
            p_error_message := 'Error al eliminar libro: ' || SQLERRM;
    END SP_ELIMINAR_LIBRO;

    FUNCTION SF_CONSULTAR_LIBRO_POR_ID (
        p_id_libro IN LIBROS.ID_LIBRO%TYPE
    ) RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_cursor FOR
            SELECT L.ID_LIBRO, L.TITULO, L.ISBN, L.ANIO_PUBLICACION, L.ID_AUTOR,
                   A.NOMBRE AS NOMBRE_AUTOR, A.APELLIDO AS APELLIDO_AUTOR,
                   L.FECHA_CREACION, L.FECHA_MODIFICACION
            FROM LIBROS L
            JOIN AUTORES A ON L.ID_AUTOR = A.ID_AUTOR
            WHERE L.ID_LIBRO = p_id_libro;
        RETURN v_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END SF_CONSULTAR_LIBRO_POR_ID;

    FUNCTION SF_CONSULTAR_LIBRO_POR_ISBN (
        p_isbn IN LIBROS.ISBN%TYPE
    ) RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_cursor FOR
            SELECT L.ID_LIBRO, L.TITULO, L.ISBN, L.ANIO_PUBLICACION, L.ID_AUTOR,
                   A.NOMBRE AS NOMBRE_AUTOR, A.APELLIDO AS APELLIDO_AUTOR,
                   L.FECHA_CREACION, L.FECHA_MODIFICACION
            FROM LIBROS L
            JOIN AUTORES A ON L.ID_AUTOR = A.ID_AUTOR
            WHERE L.ISBN = p_isbn;
        RETURN v_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END SF_CONSULTAR_LIBRO_POR_ISBN;

    FUNCTION SF_CONSULTAR_TODOS_LIBROS
    RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_cursor FOR
            SELECT L.ID_LIBRO, L.TITULO, L.ISBN, L.ANIO_PUBLICACION, L.ID_AUTOR,
                   A.NOMBRE AS NOMBRE_AUTOR, A.APELLIDO AS APELLIDO_AUTOR,
                   L.FECHA_CREACION, L.FECHA_MODIFICACION
            FROM LIBROS L
            JOIN AUTORES A ON L.ID_AUTOR = A.ID_AUTOR
            ORDER BY L.TITULO;
        RETURN v_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END SF_CONSULTAR_TODOS_LIBROS;

    FUNCTION SF_CONSULTAR_LIBROS_POR_AUTOR (
        p_id_autor IN AUTORES.ID_AUTOR%TYPE
    ) RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
        v_autor_existe NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_autor_existe FROM AUTORES WHERE ID_AUTOR = p_id_autor;

        IF v_autor_existe = 0 THEN
            -- Abrir un cursor que garantice 0 filas si el autor no existe
            OPEN v_cursor FOR
                SELECT L.ID_LIBRO, L.TITULO, L.ISBN, L.ANIO_PUBLICACION, L.ID_AUTOR,
                       A.NOMBRE AS NOMBRE_AUTOR, A.APELLIDO AS APELLIDO_AUTOR,
                       L.FECHA_CREACION, L.FECHA_MODIFICACION
                FROM LIBROS L
                JOIN AUTORES A ON L.ID_AUTOR = A.ID_AUTOR
                WHERE 1 = 0; -- Condición siempre falsa para asegurar un cursor vacío
            RETURN v_cursor;
        END IF;

        OPEN v_cursor FOR
            SELECT L.ID_LIBRO, L.TITULO, L.ISBN, L.ANIO_PUBLICACION, L.ID_AUTOR,
                   A.NOMBRE AS NOMBRE_AUTOR, A.APELLIDO AS APELLIDO_AUTOR,
                   L.FECHA_CREACION, L.FECHA_MODIFICACION
            FROM LIBROS L
            JOIN AUTORES A ON L.ID_AUTOR = A.ID_AUTOR
            WHERE L.ID_AUTOR = p_id_autor
            ORDER BY L.TITULO;
        RETURN v_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            -- Si el cursor ya estaba abierto y ocurre un error después, podría estar en un estado inconsistente.
            IF v_cursor IS NOT NULL AND v_cursor%ISOPEN THEN
                CLOSE v_cursor;
            END IF;
            RAISE;
    END SF_CONSULTAR_LIBROS_POR_AUTOR;

END PKG_GESTION_LIBROS;
/

PROMPT Script finalizado.